pipeline {
    agent any
    parameters {
        string(name: 'DOCKER_IMAGE_NAME', defaultValue: 'your-app-image', description: 'Name of the Docker image to build')
        string(name: 'ECR_REPOSITORY_URI', defaultValue: '323526869397.dkr.ecr.us-west-2.amazonaws.com/myrepo2', description: 'URI of the ECR repository to push Docker image to')
        booleanParam(name: 'AWS_CONFIG_CHANGED', defaultValue: false, description: 'Flag indicating whether AWS configuration has changed')
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'your-aws-creds', url: 'https://github.com/devam-yorkie/cdk-copilot-deploy.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with the provided name
                    sh "docker build -t ${params.DOCKER_IMAGE_NAME} ."
                }
            }
        }
        stage('Push Docker Image to ECR') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'useraleem-aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        // Tag and push Docker image to the provided ECR repository URI
                        sh "docker tag ${params.DOCKER_IMAGE_NAME}:latest ${params.ECR_REPOSITORY_URI}:latest"
                        sh "aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${params.ECR_REPOSITORY_URI}"
                        sh "docker push ${params.ECR_REPOSITORY_URI}:latest"
                    }
                }
            }
        }
        stage('Check AWS Configuration Change') {
            when {
                expression {
                    // Condition to check if AWS configuration has changed
                    params.AWS_CONFIG_CHANGED == true
                }
            }
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'useraleem-aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                // Logic to create new task definition with a new revision
                script {
                    // Contents of new_task_definition.json
                    def newTaskDefinitionJSON = """
                    {
                      "family": "your-task-family",
                      "containerDefinitions": [
                        {
                          "name": "your-container-name",
                          "image": "${params.ECR_REPOSITORY_URI}:latest",
                          "cpu": 256,
                          "memory": 512,
                          "essential": true
                        }
                      ],
                      "networkMode": "awsvpc",
                      "executionRoleArn": "your-execution-role-arn",
                      "taskRoleArn": "your-task-role-arn",
                      "cpu": "256",
                      "memory": "512",
                      "requiresCompatibilities": ["FARGATE"],
                      "tags": [
                        {
                          "key": "your-tag-key",
                          "value": "your-tag-value"
                        }
                      ]
                    }
                    """
                    // Create a temporary file to store the new task definition JSON
                    def tempFile = 'new_task_definition.json'
                    writeFile file: tempFile, text: newTaskDefinitionJSON
                    
                    // Register the new task definition
                    def taskDefinition = sh(script: "aws ecs register-task-definition --cli-input-json file://${tempFile} --region us-west-2", returnStdout: true).trim()
                    
                    // Clean up temporary file
                    sh "rm ${tempFile}"
                    
                    echo "New task definition created: ${taskDefinition}"
                } 
                }        
                } 
        }
        stage('Deploy to ECS') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'useraleem-aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    // Update ECS service with the new Docker image
                    sh 'aws ecs update-service --cluster jenkinscluster --service jenkinsservice --force-new-deployment --region us-west-2'
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful Slack to Development team!'
        }
        failure {
            echo 'Deployment failed Slack to Development team!'
        }
    }
}

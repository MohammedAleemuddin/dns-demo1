pipeline {
    agent any
    parameters {
        string(name: 'DOCKER_IMAGE_NAME', defaultValue: 'your-app-image', description: 'Name of the Docker image to build')
        string(name: 'ECR_REPOSITORY_URI', defaultValue: '323526869397.dkr.ecr.us-west-2.amazonaws.com/myrepo2', description: 'URI of the ECR repository to push Docker image to')
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'your-aws-creds', url: 'https://github.com/devam-yorkie/cdk-copilot-deploy.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with the provided name
                    sh "docker build -t ${params.DOCKER_IMAGE_NAME} ."
                }
            }
        }
        stage('Push Docker Image to ECR') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'useraleem-aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        // Tag and push Docker image to the provided ECR repository URI
                        sh "docker tag ${params.DOCKER_IMAGE_NAME}:latest ${params.ECR_REPOSITORY_URI}:latest"
                        sh "aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${params.ECR_REPOSITORY_URI}"
                        sh "docker push ${params.ECR_REPOSITORY_URI}:latest"
                    }
                }
            }
        }
        stage('Deploy to ECS') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'useraleem-aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    // Update ECS service with the new Docker image
                    sh 'aws ecs update-service --cluster jenkinscluster --service jenkinsservice --force-new-deployment --region us-west-2'
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful Slack to Development team!'
        }
        failure {
            echo 'Deployment failed Slack to Development team!'
     }
   }
}
    
